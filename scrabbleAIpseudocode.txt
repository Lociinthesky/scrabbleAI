This is the repo for a scrabble-like app, built with an eye on time and space complexity, with multiplayer functionality and an AI that gets the maximum number of points on every turn.

description of the basic strategy for the AI to iterate through the board, finding all possible words efficiently:


the way i wrote it out yesterday, each of the following lines are what you would have to do to get the candidate words for each starting square.
the following 4 lines would get you all the playable words for the starting points: board[0][0], board[0][1], board[0][2], board[0][3]
(i'll walk thru it in a min)
(MinbyLetter[4], nosave), (append(pi), save) ],col++
[(MinbyLetter[3], nosave), (append(pi), save) ],col++
[(MinbyLetter[2], nosave), (append(pi), save), (step(legalChars), nosave), (append(ite), save)],col++
[(MinbyLetter[1], nosave), (append(pi), save), (step(legalChars), nosave), (append(ite), save), (freeStep, save)],col++
all you need to notice for now is that there is a lot of repetition.  And that makes perfect sense, look
[" ", " ", " ", " ", "p", "i", " ", "i", "t", "e", " ", " ", " ", "n", " "]
if that is our top line
and there is an empty row below it
then for board[0][0], the very first thing I'm going to do is retrieve all four letter roots
a "root" is simply a section of the dictionary tree that runs all the way to the bottom of it
so my 4 letter roots are going to be
1) every 4 letter combo I can make with my letters that either is a word or is the beginning 4 letters of at least one word in the dictionary, which is a NODE on Dictree, followed by every one of its children and grandchildren etc
make sense? i'll show you one
my hand is
'a,b,c,d,e,r,g'
DictionaryTree {value: "bear", last: "r", path: "bear", depth: 4, wordChildren: Array(2), …}
that is one "root", a 4 letter "root", the value of that node is bear
let me open it up a bit
see how if you take the path down a certain way and concat each child, it spells "bearably"
and "bearable"
both "e" and "y" are children of the root "bearab"
so not every root is a word, but every root will become a word as you traverse its children to greater depth
nothing is wasted.  A root either is a word or is on the way to being a word.
a root's value *
a root is a tree, not a word.  but it has this.value
so I just showed you the "bear" tree
[" ", " ", " ", " ", "p", "i", " ", "i", "t", "e", " ", " ", " ", "n", " "]
since that is row[0], and row[1] is completely empty, the first thing I have to do is grab all of my 4 letter roots.  it cant be shorter than 4 because in scrabble words are only legal if they touch another letter on the board
then, if "pi" weren't there, but it   was just a bunch of blank spaces, I would simply iterate through all of my children, which are trees named a single letter
*for each root, i would iterate over its direct children
and if that child is one of the remaining 3 letters in my hand
I'd concat that letter onto this.value of my root and push that new root of length 5 into an array so on the next iteration i can do the same thing and get the roots of length 6
but if the 5 letter this.value is a word itself, and not just a midpoint on the pathway to more words,. then I would push that one into my "playableWords" array
uncovering each of those words and filling up that array is the purpose of ALL of this.
im just traversing through my tree, taking only the paths which are possible to take with my remaining 3 letters, to reveal all of the 5 letter words that can fit on the board, starting at row[0][0]
then i'll take all those 5 letter roots and repeat the process to reveal all 6 letter words, each of which will be pushed into "playableWords"
think of it:
i am on an empty row with all of my 4 letter combinations
like
{root.value: 'bear', 
 remainingLetters: ['c','d','g']
Let’s take a breath and talk high-level for a sec.  
   what is my purpose? to find every playable word
   so how do i do that? it's quite obvious!
I check to see whether
 'bearc'
'beard' //got one!
'bearg'' are words
but "bearclaw" may be a word.  let's assume it is.  I'll be able to see that "bearc".children !== null
so I'll save that in my newRoots array that I'm getting ready for the next iteration of this while loop
"beards" is a word so "beard" has the child "s", and since it has a child, I'll be pushing 'beard' into newRoots too
but I will also push Dictree[b][e][a][r][d]".value (which is "beard") , into playableWords
Everything in that array I will score later
ok, that is the basic idea around what i do at each board[row][col]
of course if the row is not empty, nor is the row below it, there is a whole lot more we need to take into consideration.